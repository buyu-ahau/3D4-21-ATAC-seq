
# 加载包
suppressPackageStartupMessages({
  library(rtracklayer)
  library(GenomicRanges)
  library(IRanges)
  library(dplyr)
  library(ggplot2)
})

cat("✓ 所有包加载成功\n\n")

# 设置工作目录
工作目录 <- "K:/ATAC-seq 重新分析8.5"
setwd(工作目录)
cat("✓ 工作目录设置为:", getwd(), "\n")

# 创建输出目录
输出目录 <- "基因注释分析结果"
dir.create(输出目录, showWarnings = FALSE)
dir.create(file.path(输出目录, "结果"), showWarnings = FALSE)
dir.create(file.path(输出目录, "图表"), showWarnings = FALSE)
dir.create(file.path(输出目录, "基因列表"), showWarnings = FALSE)

# 设置文件路径
cat("\n=== 检查输入文件 ===\n")
edgeR_宽松_文件 <- "EdgeR_宽松阈值_显著区域.csv"
edgeR_严格_文件 <- "EdgeR_严格阈值_显著区域.csv" 
gtf_文件 <- "Sus_scrofa.Sscrofa11.1.114.chr.gtf.gz"

# 检查文件是否存在
文件列表 <- c(edgeR_宽松_文件, edgeR_严格_文件, gtf_文件)
for(文件 in 文件列表) {
  if(file.exists(文件)) {
    文件大小 <- file.size(文件)
    cat("✓ 找到文件:", 文件, "大小:", round(文件大小/1024/1024, 2), "MB\n")
  } else {
    cat("✗ 缺少文件:", 文件, "\n")
  }
}

# 读取EdgeR差异分析结果
cat("\n=== 读取EdgeR差异分析结果 ===\n")

# 读取宽松阈值结果
if(file.exists(edgeR_宽松_文件)) {
  edgeR_宽松 <- read.csv(edgeR_宽松_文件, stringsAsFactors = FALSE)
  cat("✓ EdgeR宽松阈值结果读取成功:", nrow(edgeR_宽松), "个区域\n")
  cat("  列名:", paste(colnames(edgeR_宽松), collapse = ", "), "\n")
} else {
  stop("错误: 未找到EdgeR宽松阈值结果文件")
}

# 读取严格阈值结果
if(file.exists(edgeR_严格_文件)) {
  edgeR_严格 <- read.csv(edgeR_严格_文件, stringsAsFactors = FALSE)
  cat("✓ EdgeR严格阈值结果读取成功:", nrow(edgeR_严格), "个区域\n")
  if(nrow(edgeR_严格) > 0) {
    cat("  列名:", paste(colnames(edgeR_严格), collapse = ", "), "\n")
  }
} else {
  edgeR_严格 <- data.frame()
  cat("! EdgeR严格阈值结果文件不存在，创建空数据框\n")
}

# 读取GTF文件
cat("\n=== 读取猪基因组GTF文件 ===\n")
if(file.exists(gtf_文件)) {
  cat("正在读取压缩GTF文件（这可能需要几分钟）...\n")
  
  # 使用tryCatch处理可能的编码问题
  tryCatch({
    gtf_gr <- import(gtf_文件)
    genes_gr <- gtf_gr[gtf_gr$type == "gene"]
    cat("✓ 读取到", length(genes_gr), "个基因\n")
    
    # 检查基因信息的列
    cat("基因信息列名:", paste(colnames(mcols(genes_gr)), collapse = ", "), "\n")
    
    # 显示前3个基因的基本信息
    cat("\n前3个基因预览:\n")
    for(i in 1:min(3, length(genes_gr))) {
      gene_info <- genes_gr[i]
      cat(sprintf("基因%d: %s:%d-%d (%s) - %s\n", 
                  i, 
                  as.character(seqnames(gene_info)), 
                  start(gene_info), 
                  end(gene_info),
                  as.character(strand(gene_info)),
                  ifelse(is.null(gene_info$gene_name), "无名称", gene_info$gene_name)))
    }
    
  }, error = function(e) {
    cat("读取GTF文件时出错:", e$message, "\n")
    cat("尝试其他方法...\n")
    stop("GTF文件读取失败")
  })
  
} else {
  stop("错误: 未找到GTF文件")
}

# 定义基因注释函数
annotate_peaks_windows <- function(peak_data, peak_type, genes_gr, output_dir) {
  cat(sprintf("\n=== %s峰值基因注释 ===\n", peak_type))
  
  if(nrow(peak_data) == 0) {
    cat("! 没有峰值需要注释\n")
    return(NULL)
  }
  
  cat("正在处理", nrow(peak_data), "个峰值...\n")
  
  # 转换峰值为GRanges对象
  peaks_gr <- GRanges(
    seqnames = peak_data$seqnames,
    ranges = IRanges(start = peak_data$start, end = peak_data$end),
    strand = "*",
    fold_change = peak_data$Fold,
    fdr = peak_data$FDR,
    peak_id = paste0("Peak_", 1:nrow(peak_data))
  )
  
  cat("正在查找最近基因...\n")
  
  # 找到每个峰值最近的基因
  nearest_indices <- nearest(peaks_gr, genes_gr)
  
  # 处理没有找到最近基因的情况
  valid_indices <- !is.na(nearest_indices)
  
  cat("成功注释", sum(valid_indices), "个峰值\n")
  
  # 计算到TSS的距离
  tss_positions <- rep(NA, length(peaks_gr))
  tss_positions[valid_indices] <- ifelse(
    strand(genes_gr[nearest_indices[valid_indices]]) == "+", 
    start(genes_gr[nearest_indices[valid_indices]]), 
    end(genes_gr[nearest_indices[valid_indices]])
  )
  
  peak_centers <- start(peaks_gr) + (end(peaks_gr) - start(peaks_gr))/2
  distance_to_tss <- peak_centers - tss_positions
  
  # 创建注释结果
  anno_df <- data.frame(
    seqnames = as.character(seqnames(peaks_gr)),
    start = start(peaks_gr),
    end = end(peaks_gr),
    width = width(peaks_gr),
    peak_id = peaks_gr$peak_id,
    fold_change = peaks_gr$fold_change,
    fdr = peaks_gr$fdr,
    distanceToTSS = distance_to_tss,
    stringsAsFactors = FALSE
  )
  
  # 添加基因信息
  anno_df$nearestGene <- rep("Unknown", nrow(anno_df))
  anno_df$geneId <- rep("Unknown", nrow(anno_df))
  anno_df$geneType <- rep("Unknown", nrow(anno_df))
  
  if(sum(valid_indices) > 0) {
    valid_genes <- genes_gr[nearest_indices[valid_indices]]
    
    # 安全地提取基因信息
    if("gene_name" %in% colnames(mcols(valid_genes))) {
      anno_df$nearestGene[valid_indices] <- ifelse(
        is.na(valid_genes$gene_name), "Unknown", valid_genes$gene_name
      )
    }
    
    if("gene_id" %in% colnames(mcols(valid_genes))) {
      anno_df$geneId[valid_indices] <- ifelse(
        is.na(valid_genes$gene_id), "Unknown", valid_genes$gene_id
      )
    }
    
    if("gene_biotype" %in% colnames(mcols(valid_genes))) {
      anno_df$geneType[valid_indices] <- ifelse(
        is.na(valid_genes$gene_biotype), "Unknown", valid_genes$gene_biotype
      )
    }
  }
  
  # 添加基因组区域分类
  anno_df$annotation <- ifelse(
    is.na(anno_df$distanceToTSS), "Unknown",
    ifelse(abs(anno_df$distanceToTSS) <= 3000, "Promoter", 
           ifelse(abs(anno_df$distanceToTSS) <= 10000, "Proximal", "Distal"))
  )
  
  # 统计注释分布
  anno_stats <- table(anno_df$annotation)
  cat("\n注释区域分布:\n")
  print(anno_stats)
  
  # 基因类型分布
  gene_type_stats <- table(anno_df$geneType)
  cat("\n基因类型分布（前10）:\n")
  print(head(sort(gene_type_stats, decreasing = TRUE), 10))
  
  # 保存详细注释结果
  write.csv(anno_df, file.path(output_dir, sprintf("结果/%s_基因注释结果.csv", peak_type)), 
            row.names = FALSE)
  
  # 保存统计结果
  write.csv(as.data.frame(anno_stats), 
            file.path(output_dir, sprintf("结果/%s_区域分布统计.csv", peak_type)), 
            row.names = FALSE)
  
  write.csv(as.data.frame(gene_type_stats), 
            file.path(output_dir, sprintf("结果/%s_基因类型统计.csv", peak_type)), 
            row.names = FALSE)
  
  # 保存基因列表
  有效基因 <- unique(anno_df$nearestGene[anno_df$nearestGene != "Unknown"])
  write.table(有效基因, 
              file.path(output_dir, sprintf("基因列表/%s_注释基因列表.txt", peak_type)), 
              row.names = FALSE, col.names = FALSE, quote = FALSE)
  
  cat("保存了", length(有效基因), "个唯一基因到基因列表\n")
  
  # 生成图表
  tryCatch({
    # TSS距离分布图
    valid_distances <- anno_df$distanceToTSS[!is.na(anno_df$distanceToTSS)]
    if(length(valid_distances) > 0) {
      pdf(file.path(output_dir, sprintf("图表/%s_TSS距离分布图.pdf", peak_type)), 
          width = 10, height = 6)
      hist(valid_distances, breaks = 50, 
           main = paste(peak_type, "峰值相对TSS距离分布"),
           xlab = "距离TSS (bp)", ylab = "峰值数量",
           col = "lightblue", border = "black")
      abline(v = c(-3000, 3000), col = "red", lty = 2, lwd = 2)
      legend("topright", "启动子区域 (±3kb)", col = "red", lty = 2, lwd = 2)
      dev.off()
    }
    
    # 区域分布饼图
    if(length(anno_stats) > 0) {
      pdf(file.path(output_dir, sprintf("图表/%s_区域分布饼图.pdf", peak_type)), 
          width = 8, height = 6)
      pie(anno_stats, main = paste(peak_type, "峰值基因组区域分布"),
          col = rainbow(length(anno_stats)))
      dev.off()
    }
    
    cat("✓ 图表生成完成\n")
    
  }, error = function(e) {
    cat("图表生成时出现警告:", e$message, "\n")
  })
  
  cat("✓", peak_type, "基因注释完成\n")
  
  return(list(
    dataframe = anno_df,
    stats = anno_stats,
    gene_types = gene_type_stats,
    valid_genes = 有效基因
  ))
}



# 修正错误并继续进行注释分析
cat("\n")
cat(paste(rep("=", 50), collapse=""))
cat("\n")
cat("开始基因注释分析\n")
cat(paste(rep("=", 50), collapse=""))
cat("\n")

# 注释宽松阈值结果
宽松_注释结果 <- annotate_peaks_windows(edgeR_宽松, "EdgeR_宽松阈值", genes_gr, 输出目录)

# 注释严格阈值结果（如果有的话）
if(nrow(edgeR_严格) > 0) {
  严格_注释结果 <- annotate_peaks_windows(edgeR_严格, "EdgeR_严格阈值", genes_gr, 输出目录)
} else {
  严格_注释结果 <- NULL
  cat("\n! EdgeR严格阈值结果为空，跳过注释\n")
}

# 注释宽松阈值结果
宽松_注释结果 <- annotate_peaks_windows(edgeR_宽松, "EdgeR_宽松阈值", genes_gr, 输出目录)

# 注释严格阈值结果（如果有的话）
if(nrow(edgeR_严格) > 0) {
  严格_注释结果 <- annotate_peaks_windows(edgeR_严格, "EdgeR_严格阈值", genes_gr, 输出目录)
} else {
  严格_注释结果 <- NULL
  cat("\n! EdgeR严格阈值结果为空，跳过注释\n")
}

# 生成综合分析报告
cat("\n=== 生成综合分析报告 ===\n")

# 创建综合统计表
综合统计 <- data.frame()

if(!is.null(宽松_注释结果)) {
  宽松_行 <- data.frame(
    峰值类型 = "EdgeR_宽松阈值",
    峰值总数 = nrow(edgeR_宽松),
    注释成功数 = sum(!is.na(宽松_注释结果$dataframe$nearestGene) & 
                  宽松_注释结果$dataframe$nearestGene != "Unknown"),
    唯一基因数 = length(宽松_注释结果$valid_genes),
    启动子区域 = sum(宽松_注释结果$dataframe$annotation == "Promoter", na.rm = TRUE),
    近端区域 = sum(宽松_注释结果$dataframe$annotation == "Proximal", na.rm = TRUE),
    远端区域 = sum(宽松_注释结果$dataframe$annotation == "Distal", na.rm = TRUE),
    平均距离TSS = round(mean(abs(宽松_注释结果$dataframe$distanceToTSS), na.rm = TRUE))
  )
  综合统计 <- rbind(综合统计, 宽松_行)
}

if(!is.null(严格_注释结果)) {
  严格_行 <- data.frame(
    峰值类型 = "EdgeR_严格阈值",
    峰值总数 = nrow(edgeR_严格),
    注释成功数 = sum(!is.na(严格_注释结果$dataframe$nearestGene) & 
                  严格_注释结果$dataframe$nearestGene != "Unknown"),
    唯一基因数 = length(严格_注释结果$valid_genes),
    启动子区域 = sum(严格_注释结果$dataframe$annotation == "Promoter", na.rm = TRUE),
    近端区域 = sum(严格_注释结果$dataframe$annotation == "Proximal", na.rm = TRUE),
    远端区域 = sum(严格_注释结果$dataframe$annotation == "Distal", na.rm = TRUE),
    平均距离TSS = round(mean(abs(严格_注释结果$dataframe$distanceToTSS), na.rm = TRUE))
  )
  综合统计 <- rbind(综合统计, 严格_行)
}

if(nrow(综合统计) > 0) {
  write.csv(综合统计, file.path(输出目录, "结果/综合注释统计.csv"), row.names = FALSE)
  
  cat("=== 综合注释统计 ===\n")
  print(综合统计)
}

# 提取和展示Top基因
if(!is.null(严格_注释结果) && nrow(严格_注释结果$dataframe) > 0) {
  cat("\n=== 严格阈值Top 20关键基因 ===\n")
  
  # 按fold change排序
  严格_有效 <- 严格_注释结果$dataframe[
    严格_注释结果$dataframe$nearestGene != "Unknown" & 
      !is.na(严格_注释结果$dataframe$nearestGene), ]
  
  if(nrow(严格_有效) > 0) {
    严格_排序 <- 严格_有效[order(abs(严格_有效$fold_change), decreasing = TRUE), ]
    top20 <- head(严格_排序, 20)
    
    for(i in 1:nrow(top20)) {
      cat(sprintf("%2d. %-15s (FC=%6.2f, 距离TSS=%8d bp, %s)\n", 
                  i, 
                  top20$nearestGene[i], 
                  top20$fold_change[i], 
                  top20$distanceToTSS[i],
                  top20$annotation[i]))
    }
    
    # 保存Top基因列表
    top_genes_file <- file.path(输出目录, "结果/严格阈值_Top20基因详细.csv")
    write.csv(top20[, c("nearestGene", "geneId", "fold_change", "fdr", 
                        "distanceToTSS", "annotation", "geneType")], 
              top_genes_file, row.names = FALSE)
    
    cat("✓ Top 20基因详细信息已保存到:", top_genes_file, "\n")
  }
}

# 生成最终报告
报告文件 <- file.path(输出目录, "基因注释分析报告.txt")
报告内容 <- c(
  "=== ATAC-seq差异峰基因注释分析报告 ===",
  paste("分析时间:", Sys.time()),
  paste("用户: buyu-ahau"),
  paste("工作目录:", getwd()),
  "",
  "=== 输入文件 ===",
  paste("EdgeR宽松阈值结果:", edgeR_宽松_文件, "-", nrow(edgeR_宽松), "个峰值"),
  paste("EdgeR严格阈值结果:", edgeR_严格_文件, "-", nrow(edgeR_严格), "个峰值"),
  paste("猪基因组GTF文件:", gtf_文件, "-", length(genes_gr), "个基因"),
  "",
  "=== 主要发现 ===",
  if(nrow(综合统计) > 0) {
    apply(综合统计, 1, function(x) {
      paste(x["峰值类型"], ":", x["峰值总数"], "个峰值,", 
            x["唯一基因数"], "个基因,", 
            x["启动子区域"], "个启动子区域")
    })
  } else "无有效结果",
  "",
  "=== 生成文件 ===",
  "结果文件:",
  paste("- ", list.files(file.path(输出目录, "结果"), pattern = "\\.csv$")),
  "",
  "基因列表:",
  paste("- ", list.files(file.path(输出目录, "基因列表"), pattern = "\\.txt$")),
  "",
  "图表文件:",
  paste("- ", list.files(file.path(输出目录, "图表"), pattern = "\\.pdf$"))
)

writeLines(报告内容, 报告文件)

# 保存工作环境
save.image(file.path(输出目录, "基因注释分析_Windows完整环境.RData"))

# 最终总结
cat("\n" + paste(rep("=", 60), collapse="") + "\n")
cat("🎉 Windows版基因注释分析完成！\n")
cat(paste(rep("=", 60), collapse="") + "\n")
cat("工作目录:", getwd(), "\n")
cat("结果保存在:", 输出目录, "\n")
cat("分析完成时间:", as.character(Sys.time()), "\n")

if(nrow(综合统计) > 0) {
  cat("\n📊 最终统计:\n")
  print(综合统计)
}

cat("\n📁 输出文件夹结构:\n")
cat("📂", 输出目录, "\n")
cat("  ├── 📂 结果/ (CSV文件)\n")
cat("  ├── 📂 图表/ (PDF图表)\n")
cat("  ├── 📂 基因列表/ (基因名称文件)\n")
cat("  ├── 📄 基因注释分析报告.txt\n")
cat("  └── 📄 基因注释分析_Windows完整环境.RData\n")

cat("\n🔬 下一步建议:\n")
cat("1. 查看 '结果' 文件夹中的CSV文件\n")
cat("2. 使用基因列表进行在线功能富集分析\n")
cat("3. 查看PDF图表了解分布特征\n")
cat("4. 重点关注启动子区域的差异峰\n")

